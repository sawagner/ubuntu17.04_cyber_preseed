#! /bin/bash
# lbm-inject
#
#  lbm-inject is a tool to create Ubuntu installation media containing
#  an LCSEE Systems preseed file for automated Ubuntu installation.
#
#  lbm-inject creates an custom .iso by extracting
#  the contents of a stock Ubuntu installation
#  .iso, performing modifications on the contents, and creating a new
#  .iso file from the modified contents.
#
#  A custom .iso may be created from either
#   Ubuntu server media
#  or
#   Ubuntu net media
#  stock ISOs.  lbm-inject handles each type differently,
#  and the type must be selected using a command line argument.
#
#  If Ubuntu server media and Ubuntu net media are new terms to you,
#  ask an internal br0 for an explanation.
#
# 
# @Author Barry Martin
# @Author Terry Ferrett
# @Since 5/13/15

usage()
{
cat <<EOF

Usage:
	lbm-inject -i iso -p preseed [ -t tar file ] [ -h ] [ -n ]
	
	-h	Show the help menu
	-i	The iso file to use
	-p 	The preseed file to inject 
	-t	The tar file to extract. Must NOT be compressed. 
        -n      Create net media.

	Description:
 	  This tool will inject files into a Ubuntu iso. Preseeds are 
	  automatically placed into the correct location to be used
	  on boot. All tar files are placed in the /loud directory in 
	  the root of the iso file.

          If the -n option is specified, lbm-inject will create
          net media, and expects a stock net media iso to be
          specified using -i. 

          If the -n option is not specified, lbm-inject will create server media,
          and expects a stock server media iso to be specfied using -i.

          Note that specifying stock server media (-i) when requesting 
          net media (-n) will fail, as will the opposite case.

	      
	Examples:

         # Create server media using preseed file "mypreseed.seed".
	  $ lbm-inject -i ubuntu-server.iso -p mypreseed.seed 

         

         # Create server media using preseed file "mypreseed.seed" and
         # copy the contents of tar file "files.tar" onto media.
	  $ lbm-inject -i ubuntu-server.iso -p mypreseed.seed -t files.tar



         # Create net media using preseed file "mypreseed.seed" 
	  $ lbm-inject -i mini.iso -p mypreseed.seed -n 


EOF
}

# Print help if -h or no args specified
[ "${1}" == "-h" ] && usage && exit 0
[ "$#" -eq 0 ] && usage && exit 0

# Make sure only root can execute this script.
if [[ $EUID -ne 0 ]]; then
   echo "This script must be run as root." 1>&2
   exit 1
fi


### Input argument processing.

## Set default input arguments.
NET_MEDIA="FALSE"
PRESEED=""


## Parse input arguments from command line.
#  -i  ISO file containing Ubuntu stock media.
#  -p  Preseed
#  -t  TAR archive (optional)
#  -n  Create net media (optional)
while [ "$1" != "" ]; do
    
    if [ "$1" == "-i" ]; then
	STOCK_ISO="${2}"; shift

    elif [ "$1" == "-p" ]; then
	PRESEED="${2}"; shift

    elif [ "$1" == "-t" ]; then
	TAR_FILE="${2}"; shift

    elif [ "$1" == "-n" ]; then
	NET_MEDIA="TRUE";
	
    fi
    
    shift
    
done


## Input argument post-processing.
# Get canonical file name (CFN) to input preseed file.
# The canonical file name is the full path to the file.
PRESEED_CFN=$(readlink -f "$PRESEED")


### Create directories for processing.

## Define directories.
BUILD_DIR='/tmp/lbm-inject-build'
PRESEED_DIR="$BUILD_DIR/preseed"
STOCK_ISO_MOUNT_POINT='/tmp/lbm-inject-imp'   


## Create directories.
rm -rf "$BUILD_DIR"                 # Remove files from previous builds.
mkdir -p "$BUILD_DIR"               # Build directory for new media.

mkdir -p "$STOCK_ISO_MOUNT_POINT"   # Directory to mount stock Ubuntu ISO.
umount "$STOCK_ISO_MOUNT_POINT"     # Perform unmount in case stock ISO already mounted.

mkdir -p "$PRESEED_DIR"       # Directory to contain preseed.



### Copy contents into media.

## Mount stock ISO and copy its contents into build directory.
mount -o loop "$STOCK_ISO" "$STOCK_ISO_MOUNT_POINT"
rsync -av "${STOCK_ISO_MOUNT_POINT}/" "$BUILD_DIR"
rsync -av "${STOCK_ISO_MOUNT_POINT}/.disk" "$TMPDIR"

## Copy input preseed into build directory.
PRESEED_NAME='ubuntu-server.seed'
cp "$PRESEED_CFN" "$PRESEED_DIR/$PRESEED_NAME"

## If TAR files are specified, copy them into build directory.
if [ -n "$TAR_FILE" ]; then
    mkdir "$BUILD_DIR/keys"
    tar -xf "$TAR_FILE" -C "${BUILD_DIR}/keys"
fi


### Miscellaneous processing.
# Test preseed for consistency.
test=$(md5sum ${TMPDIR}/preseed/ubuntu-server.seed | cut -d ' ' -f1)
echo "${test} ./preseed/ubuntu-server.seed" >> ${TMPDIR}/md5sum.txt


### Inject the preseed into a custom ramdrive if net media is requested.
if [ "$NET_MEDIA" == "TRUE" ]; then

    # Get current working directory.
    CWD=$(pwd)
    
    # Change to build root.
    cd "$BUILD_DIR"
    
    # Create temporary directory to contain new ramdrive.
    mkdir tmprd

    # Copy stock ramdrive into temporary directory.
    cp initrd.gz tmprd/
    
    # Extract contents of stock ramdrive.
    cd tmprd
    gunzip initrd.gz
    cpio -i < initrd
    
    # Copy preseed into new ramdrive contents.
    cp "$PRESEED_CFN" preseed.cfg
    
    if [ -n "$TAR_FILE" ]; then
        mkdir keys
        tar -xf "$TAR_FILE" -C "keys"
    fi
    
    # Remove uncompressed ram drive and stock ramdrive in build root.
    rm initrd ../initrd.gz

    # Create new ramdrive and compress it into build root.
    find . | cpio -o -H newc | gzip > ../initrd.gz
    
    # Remove temporary directory.
    cd ..
    rm -rf tmprd
    
    # Return to working directory
    cd $CWD

fi



### Create custom ISO.
# Select net media or server media.

if [ "$NET_MEDIA" == "TRUE" ]; then
    # Net Media    

    # Get current working directory.
    CWD=$(pwd)
        
    # Change to build directory.
    cd "$BUILD_DIR"

    # Create custom net install media.

    # The command
    #  xorriso [1]
    # is a GNU tool to create ISO 9660 images. Notably, it's
    # used to create Ubuntu and Debian installation media.
    # Xorriso is comparable to other ISO 9660 image creation
    # tools like mkisofs, however, xorriso has additional
    # features, such as the ability to create UEFI bootable images.
    #
    # The following xorriso command creates an image which can
    # boot from USB or CD.  USB booting requires installing
    #  a master boot record (MBR) onto the image [2].
    # This is accomplished by the argument
    #
    #    -isohybrid-mbr /usr/lib/ISOLINUX/isohdpfx.bin 
    #
    # In order to boot using UEFI firmware, the image must
    # contain a FAT filesystem.  The FAT filesystem
    # must contain an EFI bootloader.
    # The following parameters specify a FAT filesystem
    #
    #    -eltorito-alt-boot
    #    -no-emul-boot
    #    -e "boot/grub/efi.img"
    #
    # The FAT filesystem is contained in the disk image
    #       boot/grub/efi.img
    # which is located on the Ubuntu net install media ISO.
    #
    # The parameter
    #     -isohybrid-gpt-basdat
    # specifies that a GPT partition table entry should be
    # created in the MBR for the FAT filesystem.
    
    xorriso -as mkisofs -R \
	    -o ${CWD}/lbm-inject.iso \
	    -isohybrid-mbr /usr/lib/ISOLINUX/isohdpfx.bin \
	    -b "isolinux.bin" -c "boot.cat" \
	    -no-emul-boot -boot-load-size 4 -boot-info-table \
	    -eltorito-alt-boot \
	    -no-emul-boot \
    	    -e "boot/grub/efi.img" \
	    -isohybrid-gpt-basdat \
	    \
	    .

    cd $CWD    

  
    
else
    # Server Media

    # Get current working directory.
    CWD=$(pwd)
    
    # Change to build directory.
    cd "$BUILD_DIR"
    
    mkisofs -o "${CWD}/lbm-inject.iso"\
	    -b "isolinux/isolinux.bin" -c "isolinux/boot.cat" \
	    -no-emul-boot -boot-load-size 4 -boot-info-table \
	    -J -R -V "LOUD Ubuntu Iso" .

    cd $CWD
    
fi



### Script complete.
echo "Finished creating media."






### References

# [1] GNU xorriso  http://www.gnu.org/software/xorriso/
# [2] isohybrid    http://www.syslinux.org/wiki/index.php/Isohybrid
